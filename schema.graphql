scalar DateTime

directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION

enum Role {
    ADMIN
    USER
}

interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

enum UserRole {
    ADMIN
    USER
}

type User implements Node {
    id: ID!
    name: String!
    email: String!
    password: String!
    country: String!
    role: UserRole!
    createdAt: DateTime!
    updatedAt: DateTime!
    deletedAt: DateTime
}

type UserEdge {
    cursor: String!
    node: User!
}

type UserConnection {
    edges: [UserEdge]
    pageInfo: PageInfo!
}

input FindUserInput {
    name: String
    email: String
}

type Query {
    currentUser: User! @auth(requires: USER)
    user(id: ID!): User! @auth(requires: ADMIN)
    users(
        first: Int,
        after: String,
        last: Int,
        before: String,
        filter: FindUserInput!
    ): UserConnection @auth(requires: ADMIN)
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    country: String!
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    password: String
    country: String
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User! @auth(requires: USER)
    deleteUser(id: ID!): Boolean! @auth(requires: USER)

    login(email: String!, password: String!): User!
    logout: Boolean! @auth(requires: USER)
}
